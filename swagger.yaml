openapi: 3.0.1
info:
  title: Frux Smart Constract API
  description: Specifications for frux smart contract API 2021
  version: 1.0.0
servers:
- url: https://frux-smart-contract.herokuapp.com/
tags:
- name: project
  description: Frux Smart Contract Project API
- name: wallet
  description: Frux User's wallet API
- name: health
  description: Frux Smart Contract Health Endpoint
paths:
  /project:
    post:
      tags:
        - project
      summary: "Create project"
      description: "Creates a smart contract for the new project with the given parameters"
      operationId: "createProject"
      security:
        - ApiKeyAuth: []
      requestBody: 
        description: Project Object to be added
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      responses:
        200: 
          description: "Smart Contract was created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        400:
          description: "Owner's wallet or Reviewer's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Smart contract integration error"
          content: {}
  /project/{projectHash}:
    post:
      tags:
        - project
      summary: "Fund project"
      description: "Allows a user to fund a project"
      operationId: "fundProject"
      security:
        - ApiKeyAuth: []
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Fund'
        required: true
      parameters:
      - name: projectHash
        in: path 
        description: Hash of the project 
        required: true
        schema:
          type: string
      responses:
        200: 
          description: "Smart Contract recieved the funds from the wallet"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        400:
          description: "Funder's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Smart contract integration error"
          content: {}
    get:
      tags:
          - project
      summary: "Get project"
      description: "Get the Project"
      operationId: "getProject"
      security:
        - ApiKeyAuth: []
      parameters:
      - name: projectHash
        in: path 
        description: Hash of the project 
        required: true
        schema:
          type: string
      responses:
        200: 
          description: "Smart Contract was created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        400:
          description: "Owner's wallet or Reviewer's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Smart contract integration error"
          content: {}
  /project/{projectHash}/stage/{stageId}:
    post:
      tags:
        - project
      summary: "Complete stage from project"
      description: "Sets a stage(and all of the previous) as completed"
      operationId: "completedStageProject"
      security:
        - ApiKeyAuth: []
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Stage'
        required: true
      parameters:
      - name: projectHash
        in: path 
        description: Hash of the project 
        required: true
        schema:
          type: string
      - name: stageId
        in: path 
        description: A stage number that was not considered completed and smaller or equal to the last stage id
        required: true
        schema:
          type: number
      responses:
        200: 
          description: "Smart Contract recieved the funds from the wallet"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectResponse'
        400:
          description: "Funder's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Smart contract integration error"
          content: {}
  /project/{projectHash}/withdraw:
    post:
      tags:
        - project
      summary: "Withdraws the funds sent"
      description: "Withdraws the funds to the founder for a given project. If `fundToWithdraw`, then returns the amount of fund set in the variable, else full refund."
      operationId: "withdrawProject"
      security:
        - ApiKeyAuth: []
      requestBody: 
        content:
          application/json: 
            schema:
              $ref: '#/components/schemas/Withdraw'
        required: true
      parameters:
      - name: projectHash
        in: path 
        description: Hash of the project 
        required: true
        schema:
          type: string
      responses:
        200: 
          description: "The funds were sent to the funder successfully"
        400:
          description: "Funder's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Server Error - Cannot refund the amount of funds given"
          content: {}
  /wallet:
    post:
      tags:
        - wallet
      summary: "Create user's wallet"
      description: "Creates a wallet for a user"
      operationId: "createWallet"
      security:
        - ApiKeyAuth: []
      responses:
        200: 
          description: "Wallet was successfully created"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        401:
          description: "Unauthorized request"
        500:
          description: "Server Error: Wallet was not created properly"
          content: {}
  /wallet/{id}:
    get:
      tags:
          - wallet
      summary: "Get wallet"
      description: "Get the Owner's wallet"
      operationId: "getWallet"
      security:
        - ApiKeyAuth: []
      parameters:
      - name: id
        in: path 
        description: Wallet's id
        required: true
        schema:
          type: string
      responses:
        200: 
          description: "Operation successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
        400:
          description: "Owner's wallet or Reviewer's wallet not found"
          content: {}
        401:
          description: "Unauthorized request"
        500:
          description: "Server Error: Can't return the wallet"
  /health:
    get:
      tags:
          - health
      summary: "Status"
      description: "Get the server status"
      operationId: "health"
      responses:
        200: 
          description: "Operation successful"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletResponse'
    
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
  schemas:
    Project:
      required:
      - ownerId
      - reviewerId
      - stagesCost
      properties:
        ownerId:
          type: string
        reviewerId:
          type: string
        stagesCost:
          type: array
          items:
            type: number
    ProjectResponse:
      properties:
        hash:
          type: string
          format: int64
        ownerId:
          type: string
        reviewerId:
          type: string
        stagesCost:
          type: string
    Fund:
      required:
      - funderId
      properties:
        funderId:
          type: string
        amountToFund:
          type: number
    WalletResponse:
      properties:
        address:
          type: string
        privateKey:
          type: string
        id:
          type: string
    Stage:
      required:
      - reviewerId
      properties:
        reviewerId:
          type: string
    Withdraw:
      required:
      - funderId
      properties:
        funderId:
          type: string
        fundsToWithdraw:
          type: number